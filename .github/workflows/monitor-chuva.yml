name: Weather Alert Bot

on:
  schedule:
    - cron: "0 */2 * * *"   # Every 2 hours
    - cron: "0 22 * * *"     # Daily at 22:00 UTC (19:00 BRT) - backup time
  workflow_dispatch:
    inputs:
      mode:
        description: 'Run mode'
        required: false
        default: 'normal'
        type: choice
        options:
        - normal
        - health-check
        - continuous

env:
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  OPENWEATHER_KEY: ${{ secrets.OPENWEATHER_KEY }}
  CHAT_ID: ${{ secrets.CHAT_ID }}
  RAIN_THRESHOLD: ${{ vars.RAIN_THRESHOLD || '10' }}
  FORECAST_HOURS: ${{ vars.FORECAST_HOURS || '6' }}

jobs:
  run-bot:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Restore geo cache
        uses: actions/cache@v3
        with:
          path: geo_cache.json
          key: ${{ runner.os }}-geo-cache-${{ github.ref }}-${{ hashFiles('bot.js') }}
          restore-keys: |
            ${{ runner.os }}-geo-cache-${{ github.ref }}-
            ${{ runner.os }}-geo-cache-

      - name: Health Check
        if: github.event.inputs.mode == 'health-check'
        run: npm run health

      - name: Run Continuous Mode
        if: github.event.inputs.mode == 'continuous'
        run: npm run continuous
        timeout-minutes: 120  # 2 hours max for continuous mode

      - name: Run Normal Mode
        if: github.event.inputs.mode != 'continuous' && github.event.inputs.mode != 'health-check'
        run: npm start

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: error-logs
          path: |
            geo_cache.json
          retention-days: 7

  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [run-bot]
    if: failure() && needs.run-bot.result == 'failure'
    
    steps:
      - name: Send Telegram notification
        run: |
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d chat_id="${{ secrets.CHAT_ID }}" \
          -d text="‚ùå Weather Alert Bot failed in GitHub Actions. Check: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
